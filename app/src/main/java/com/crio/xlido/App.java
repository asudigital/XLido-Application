/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.crio.xlido;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Optional;
import com.crio.xlido.entities.Event;
import com.crio.xlido.entities.User;
import com.crio.xlido.repositories.EventRepository;
import com.crio.xlido.repositories.IEventRepository;
import com.crio.xlido.repositories.IQuestionRepository;
import com.crio.xlido.repositories.IUserRepository;
import com.crio.xlido.repositories.QuestionRepository;
import com.crio.xlido.repositories.UserRepository;
import com.crio.xlido.services.EventService;
import com.crio.xlido.services.QuestionService;
import com.crio.xlido.services.UserService;

public class App {
    //Initialize repository layer
    IUserRepository userRepository = new UserRepository();
    IEventRepository eventRepository = new EventRepository();
    IQuestionRepository questionRepository = new QuestionRepository();

    //Initialize Service layer
    UserService userService = new UserService(userRepository);
    // EventService eventService = new EventService(eventRepository);
    EventService  eventService = new EventService(userRepository, eventRepository);
    QuestionService questionService = new QuestionService(questionRepository, userRepository, eventRepository);
    
  
    public static void main(String[] args) {

        // Test your code by ading commands in sample_input/sample_input_one.txt
        // Run run.sh script using "bash run.sh" in your terminal.
        if (args.length == 1){
            List<String> commandLineArgs = new LinkedList<>(Arrays.asList(args));
            String inputFile = commandLineArgs.get(0).split("=")[1];
            try {
                List<String> file_commands = Files.readAllLines(Paths.get(inputFile));
                // Execute the commands
                new App().run(file_commands);
            } catch (IOException e) {
                e.printStackTrace();
            }
            return;
        }        

        // OR
        // Test your code by adding commands in this list
        List<String> inplace_commands = new LinkedList<>(){
            {
            }
        };

        new App().run(inplace_commands);
 
    }
    public void run(List<String> commands){

        Iterator<String> it = commands.iterator();
        while(it.hasNext()){
            String line = it.next();
                if(line == null){
                    break;
                }
                List<String> tokens = Arrays.asList(line.split(","));
               

                try {
                    //Execute Services
                    switch(tokens.get(0)){
                        case "CREATE_USER":
                        createUser(tokens);
                        break;
                        case "CREATE_EVENT":
                        createEvent(tokens);
                        break;
                        case "DELETE_EVENT":
                        eventService.deleteEvent(Long.parseLong(tokens.get(1)), Long.parseLong(tokens.get(2)));
                        break;
                        case "ADD_QUESTION":
                        questionService.addQuestion(tokens.get(1),Long.parseLong(tokens.get(2)) , Long.parseLong(tokens.get(3)));
                        break;
                        case "DELETE_QUESTION":
                        questionService.deleteQuestion(Long.parseLong(tokens.get(1)), Long.parseLong(tokens.get(2)));
                        break;
                        case "UPVOTE_QUESTION":
                        questionService.upvoteQuestion(Long.parseLong(tokens.get(1)), Long.parseLong(tokens.get(2)));
                        break;
                        case "REPLY_QUESTION":
                        questionService.replyToQuestion(tokens.get(1),Long.parseLong(tokens.get(2)) , Long.parseLong(tokens.get(3)));
                        break;
                        case "LIST_QUESTIONS":
                        questionService.listOfQuestions(Long.parseLong(tokens.get(1)), tokens.get(2));
                        break;
                        default:
                            throw new RuntimeException("INVALID_COMMAND");
                }
                } catch (Exception e) {
                    System.out.println("ERROR: " + e.getMessage());
                }
        }
    }

    private void createUser(List<String> input){
        
        if (input == null || input.size() < 3) {
            throw new IllegalArgumentException("Invalid input list");
        }
        String email = input.get(1);
        String password = input.get(2);
        User createdUser = userService.createUser(email, password);
        // System.out.println(createdUser.getId());
       System.out.println( "User ID: " + createdUser.getId());
       }

       private void createEvent(List<String> input){
       
        if (input == null || input.size() < 3) {
            throw new IllegalArgumentException("Invalid input list");
        }

        String organizerIdString = input.get(2);
        Long organizerId;
        try {
             organizerId = Long.parseLong(organizerIdString);
        } catch (NumberFormatException e) {
            // System.out.println("Invalid string format for long conversion");
            throw new RuntimeException("Invalid string format for long conversion");
        }
        String title = input.get(1);
        Optional<User> user =userService.findUserById(organizerId);
        if(user.isEmpty()){
          System.out.println("ERROR: User with an id " + organizerId + " does not exist");
         return;
        }

        Event createdEvent = eventService.createEvent(organizerId, title);
        System.out.println("Event ID: " + createdEvent.getEventId());
       }

      // DELETE EVENT
//        private void deleteEvent(List<String> input){

//         String eventIdString = input.get(1);
//         String userIdString =  input.get(2);
        
//         Long eventId;
//         Long userId;
//         try {
//             eventId = Long.parseLong(eventIdString);
//             userId = Long.parseLong(userIdString);
//        } catch (NumberFormatException e) {
//            // System.out.println("Invalid string format for long conversion");
//            throw new RuntimeException("Invalid string format for long conversion");
//        }

//             //eventId is exist or not 
//     //  boolean result = eventRepository.findByEventId(eventId).isPresent();
//     //  if(result == false){
//     //     // System.out.println("ERROR: Event with an id " + eventId + " does not exist");
//     //     throw new RuntimeException("Event with an id "+ eventId + " does not exist");
        
//     //  }

//     boolean result = eventRepository.isEventIdExist(eventId);
//     if(result == false){
//             throw new RuntimeException("Event with an id "+ eventId + " does not exist");
            
//          }

//            //  userId exist or not
//    boolean result2 = userRepository.userIdExistOrNot(userId);
//    if(result2 == false){   
//     throw new RuntimeException("User with an id " + userId + " does not exist");
//    }
   
 
//      if(!eventRepository.findByEventId(eventId).get().getUserId().equals(userId)){
//         throw new RuntimeException("User with an id " + userId +" is not a organizer of Event with an id " +eventId);
//      }
     

    
//     // userId is the organiser id or not
//     //  Optional<Event> event =  eventRepository.findByEventId(eventId);
         
//     //  if(event.isPresent()){
//     //    Long userIdAsOrganiser =event.get().getUserId();
//     //    if(userIdAsOrganiser != userId){
//     //     System.out.println("User with an id " + userIdAsOrganiser + " is not a organizer of Event with an id " + eventId);
//     //     return;
//     //    }
//     //  }

//      eventService.deleteEvent(eventId, userId);
//      System.out.println("EVENT_DELETED " + eventId);
     
//        }
}
